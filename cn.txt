-----------------Q.5-----------------------
----------TCPServer--------
import java.io.*;
import java.net.*;

class TCPServer {

  public static void main(String argv[]) throws Exception
    {
      String clientSentence;
      String capitalizedSentence;

      ServerSocket welcomeSocket = new ServerSocket(1234);

      while(true) {

                   Socket connectionSocket = welcomeSocket.accept();

           BufferedReader inFromClient =
             new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));

           DataOutputStream  outToClient =
             new DataOutputStream(connectionSocket.getOutputStream());

           clientSentence = inFromClient.readLine();

           capitalizedSentence = clientSentence.toUpperCase() + '\n';

           outToClient.writeBytes(capitalizedSentence);
        }
    }
}
---------TCPClient-------------
import java.io.*;
import java.net.*;
class TCPClient {

    public static void main(String argv[]) throws Exception
    {
        String sentence;
        String modifiedSentence;

        BufferedReader inFromUser =
          new BufferedReader(new InputStreamReader(System.in));

        Socket clientSocket = new Socket("localhost", 1234);

        DataOutputStream outToServer =
          new DataOutputStream(clientSocket.getOutputStream());

        BufferedReader inFromServer =
          new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

        sentence = inFromUser.readLine();

        outToServer.writeBytes(sentence + '\n');

        modifiedSentence = inFromServer.readLine();

        System.out.println("FROM SERVER: " + modifiedSentence);
        clientSocket.close();
    }
}
-------------Q.6,20-------------------------
-------UDPServer-----------
import java.io.*;
import java.net.*;
 
class UDPServer
{
   public static void main(String args[]) throws Exception
      {
         DatagramSocket serverSocket = new DatagramSocket(9876);
  //Server Socekt Created
 
            byte[] receiveData = new byte[1024];
            byte[] sendData = new byte[1024];
            while(true)
               {
                  DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                  serverSocket.receive(receivePacket);
                  String sentence = new String( receivePacket.getData());
                  System.out.println("RECEIVED: " + sentence);
 
                  InetAddress IPAddress = receivePacket.getAddress();
                  int port = receivePacket.getPort();
 
                  String capitalizedSentence = sentence.toUpperCase();
   //Change sentence to Capital letter
                  sendData = capitalizedSentence.getBytes();
 
                  DatagramPacket sendPacket =
                  new DatagramPacket(sendData, sendData.length, IPAddress, port);
                  serverSocket.send(sendPacket);
   //Send Capitalized data back to client
               }
      }
}
-----------UDPClient-----------------
import java.io.*;
import java.net.*;
 
class UDPClient
{
   public static void main(String args[]) throws Exception
   {
      BufferedReader inFromUser =
         new BufferedReader(new InputStreamReader(System.in));
 
      DatagramSocket clientSocket = new DatagramSocket();
 //Client Socket is created
 
      InetAddress IPAddress = InetAddress.getByName("localhost");
 //Gets the IP Address 
 
      byte[] sendData = new byte[1024];
      byte[] receiveData = new byte[1024];
     System.out.print("Enter Message for server:");
      String sentence = inFromUser.readLine();
 
      sendData = sentence.getBytes();
 //sends data
 
      DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);
      clientSocket.send(sendPacket);
 
      DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
      clientSocket.receive(receivePacket);
 
      String modifiedSentence = new String(receivePacket.getData());
      System.out.println("FROM SERVER:" + modifiedSentence);
      clientSocket.close();
   }
}
------------------Q.7,18------------------------
---------ServerCode--------
import java.io.*;
import java.net.*;

public class ServerCode
{
ServerSocket ss;
Socket socket;
BufferedReader sock_in,kdb_in;
PrintWriter sock_out;
String str;
    public ServerCode()
    {
    try{
        ss=new ServerSocket(8080);
        System.out.println("Server is listening port 8080");
        socket=ss.accept();
        System.out.println("Connection established...");
        kdb_in=new BufferedReader(new InputStreamReader(System.in));
        sock_in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
        sock_out=new PrintWriter(socket.getOutputStream());
        while(true)
        {
        System.out.println("Msg from client");
        str=sock_in.readLine();

        System.out.println(str);
   
        System.out.println("Enter the msg");
        str=kdb_in.readLine();
        sock_out.println(str);
        sock_out.flush();
        if(str.equals("bye"))
        break;
        }
    }catch (Exception e) { }
    }
public static void main(String arg[])
{
    new ServerCode();
}
}
-------ClientCode--------
import java.io.*;
import java.net.*;

public class ClientCode
{
Socket socket;
BufferedReader sock_in,kdb_in;
PrintWriter sock_out;
String str;
    public ClientCode()
    {
    try{

        Socket socket=new Socket("192.168.1.3",8080);
        kdb_in=new BufferedReader(new InputStreamReader(System.in));
        sock_in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
        sock_out=new PrintWriter(socket.getOutputStream());
        while(true)
        {
     
        System.out.println("Enter the msg");
        str=kdb_in.readLine();
        sock_out.println(str);
        sock_out.flush();
        System.out.println("Msg from Server");
        str=sock_in.readLine();
        System.out.println(str);
        if(str.equals("bye"))
        break;
        }
        //socket.close();
    }catch (Exception e) { }
    }
public static void main(String arg[])
{
    new ClientCode();
}
}
---------------Q.8-------------
-------FileServer---------
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
public class FileServer 
{ 
 public static void main(String[] args) throws Exception 
{

 ServerSocket ssock = new ServerSocket(1234);
 Socket socket = ssock.accept();

 InetAddress IA = InetAddress.getByName("localhost"); 
 
 
 File file = new File("D:\\T.E\\responses.txt");
 FileInputStream fis = new FileInputStream(file);
 BufferedInputStream bis = new BufferedInputStream(fis); 

 OutputStream os = socket.getOutputStream();

 byte[] contents;
 long fileLength = file.length(); 
 long current = 0;
 long start = System.nanoTime();
 while(current!=fileLength){ 
 int size = 10000;
 if(fileLength - current >= size)
 current += size; 
 else{ 
 size = (int)(fileLength - current); 
 current = fileLength;
 } 
 contents = new byte[size]; 
 bis.read(contents, 0, size); 
 os.write(contents);
 System.out.print("Sending file ... "+(current*100)/fileLength+"% complete!");
 } 
 os.flush(); 

 socket.close();
 ssock.close();
 System.out.println("File sent succesfully!");
 } }
------FileClient----------
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.Socket;

public class FileClient {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket(InetAddress.getByName("localhost"), 1234);
            byte[] contents = new byte[10000];
            FileOutputStream fos = new FileOutputStream("d:\\Bookmarks1.txt");
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            InputStream is = socket.getInputStream();

            int bytesRead;
            while ((bytesRead = is.read(contents)) != -1) {
                bos.write(contents, 0, bytesRead);
            }

            bos.flush();
            socket.close();
            System.out.println("File saved successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
---------Q.9---------
----UDPSfile----
import java.io.File;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.io.FileWriter;

public class UDPSfile {

	public static void  main(String[] args) throws Exception{
		
		System.out.print("hello");
		DatagramSocket s=new DatagramSocket(65535);
	InetAddress ia=InetAddress.getLocalHost();
		byte[]filename=new byte[1000];
		byte[]b=new byte[10000000];

		DatagramPacket name=new DatagramPacket(filename,filename.length);
		s.receive(name);
		System.out.print("hello");
		System.out.println(new String(name.getData()));


		DatagramPacket p=new DatagramPacket(b,b.length);
		s.receive(p);
		System.out.print("hello");
		System.out.println(new String(p.getData()));
		
		
		String fname=new String(name.getData()).trim();
		fname="C://java_prog//"+fname;
		System.out.println(fname);
		
		String filedata=new String(p.getData()).trim();
		System.out.println(filedata);

	
		PrintWriter pw = new PrintWriter(fname);
		pw.println(filedata);
		pw.close();
			}
}
------UDPCfile--------
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;


public class UDPCfile {

	public static void main(String[] args)throws Exception {
		Scanner sc=new Scanner(System.in);
		DatagramSocket s=new DatagramSocket();
		InetAddress ia=InetAddress.getLocalHost();
		File f1=new File("C://java_prog//");
		File[] files=f1.listFiles();
		
		StringBuilder sb=new StringBuilder("\n");
		int x=0;
		for(int i=0;i<files.length;i++)
		{
			if(files[i].canRead())
			{
				sb.append(files[i].getName()+" ,size"+files[i].length()+"bytes\n");
				x++;
			}
		}
		System.out.println(x+" Files found");
		System.out.println(sb);
		System.out.println(" Enter filename for download ");
		String fname = sc.nextLine();
		System.out.println(fname);
		
		boolean flag = false;
		int id= 0;
		for(int i=0;i<files.length;i++) {
			if(files[i].getName().toString().equalsIgnoreCase(fname)) {
				flag = true;
				id = i;
				break;
			}
		}
		
		if(!flag) {
			System.out.println(fname + " does not exist!");
			return;
		}
		
		File filetocopy=new File(files[id].getAbsolutePath());
		FileReader fileReader=new FileReader(filetocopy);
		BufferedReader br=new BufferedReader(fileReader);
		StringBuilder sb1=new StringBuilder();

		String line;
		while((line=br.readLine())!=null)
		{
			sb1.append(line);
			sb1.append("\n");
		}
		System.out.println(sb1.toString());
		
		byte[] sentname=files[id].getName().getBytes();
		DatagramPacket p1=new DatagramPacket(sentname,sentname.length,ia,65535);
		s.send(p1);
		
		byte[] senttoserver=sb1.toString().getBytes();
		DatagramPacket p2=new DatagramPacket(senttoserver,senttoserver.length,ia,65535);
		s.send(p2);
		s.close();
		
	}

}
 -------------Q.14-------------
-----IPDemo-----
import java.net.*;
import java.util.*;

public class IPDemo
{
 public static void main(String[] args){
  String host;
  Scanner ch = new Scanner(System.in);  
  System.out.print("1.Enter Host Name \n2.Enter IP address \nChoice=");
  int choice = ch.nextInt();
  if(choice==1)
  {  
  Scanner input = new Scanner(System.in);
  System.out.print("\n Enter host name: ");
  host = input.nextLine();
  try {
   InetAddress address = InetAddress.getByName(host);
   System.out.println("IP address: " + address.getHostAddress());
   System.out.println("Host name : " + address.getHostName()); 
   System.out.println("Host name and IP address: " + address.toString());
  }
  catch (UnknownHostException ex) {
       System.out.println("Could not find " + host);
  }
  }
  else
  {
  Scanner input = new Scanner(System.in);
  System.out.print("\n Enter IP address: ");
  host = input.nextLine();
  try {
   InetAddress address = InetAddress.getByName(host);
   System.out.println("Host name : " + address.getHostName());   
   System.out.println("IP address: " + address.getHostAddress());
   System.out.println("Host name and IP address: " + address.toString());

  }
  catch (UnknownHostException ex) {
       System.out.println("Could not find " + host);
  }
  }
  
 }
}
----------Q.3,15-----------
a=input("enter any IP address: ")
l=list(a.split('.'))
op=False 
for i in l:
    if len(l)==4:
        if len (i) <= 3:
            op =True
        else:
            op=False
def check_class(a,l):
    if a==127 or a==0:
                print("This is reserved for network address")
    elif a < 255 :
        if 0 < a < 127:
            print("Its belong to class A") 
            print("subnet mask: 255.0.0.0")
            
        elif 128 <= a <= 191 : 
            print("Its belong to class B") 
            print("subnet mask: 255.255.0.0")
        elif 192 <= a <= 223 : 
            print("Its belong to class C")
            print("subnet mask: 255.255.255.0")
b=int(l[0]) 
if op==True:
    print("Ip address valid")
    check_class(b,l) 
else:
    print("ip address is invalid")
--------------Q.4------------

